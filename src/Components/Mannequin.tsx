/* eslint-disable @typescript-eslint/ban-ts-comment */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.7 man.glb
*/
// eslint-disable-next-line @typescript-eslint/ban-ts-comment

import { useEffect, useRef, useState } from "react"
import { useGLTF, useAnimations } from "@react-three/drei"
import {
  animated,
  useChain,
  useSpring,
  useSpringRef,
} from "@react-spring/three"
import * as THREE from "three"

export default function Model() {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  const group = useRef<THREE.Group>(null!)
  const [action, setAction] = useState("IdlePose")
  const previousAction = usePrevious(action)
  // @ts-ignore
  const { nodes, materials, animations } = useGLTF("./3dmodels/mannequin.glb")

  const { actions } = useAnimations(animations, group)
  const [clicked, setClicked] = useState(false)

  useEffect(() => {
    if (previousAction) {
      // @ts-ignore
      actions[previousAction].fadeOut(0.5)
      actions[action]?.stop()
    }
    // @ts-ignore
    actions[action].play()
    // @ts-ignore
    actions[action].fadeIn(0.5)

    const interval = setInterval(() => {
      if (action !== "FallingPose") {
        setAction("WavePose")
        setTimeout(() => setAction("IdlePose"), 900)
      }
    }, 3000)

    return () => clearInterval(interval)
  }, [action, actions, previousAction])

  const rotationRef = useSpringRef()
  const { rotation } = useSpring({
    ref: rotationRef,
    rotation: clicked
      ? [Math.PI / 2, -Math.PI, Math.PI / 2]
      : [Math.PI / 2, 0, Math.PI / 2],

    config: {
      duration: 1000,
    },
  })

  const positionRef = useSpringRef()
  const { position } = useSpring({
    ref: positionRef,
    position: clicked ? [20, -30, 0] : [15.5, -0.05, 0],
    config: {
      duration: 2400,
    },
  })

  useChain([rotationRef, positionRef])

  return (
    <group ref={group} dispose={null}>
      <group name="Scene">
        <animated.group
          name="Armature"
          // @ts-ignore
          rotation={rotation}
          scale={0.03}
          // @ts-ignore
          position={position}
          positionX={50}
          //cursor="pointer"
          onClick={() => {
            setClicked(true)
            setAction("FallingPose")
          }}
        >
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Beta_Joints"
            geometry={nodes.Beta_Joints.geometry}
            material={materials.Beta_Joints_MAT1}
            skeleton={nodes.Beta_Joints.skeleton}
          />
          <skinnedMesh
            name="Beta_Surface"
            geometry={nodes.Beta_Surface.geometry}
            material={materials.Beta_HighLimbsGeoSG3}
            skeleton={nodes.Beta_Surface.skeleton}
          />
        </animated.group>
      </group>
    </group>
  )
}

useGLTF.preload("./3dmodels/mannequin.glb")

function usePrevious(value: string) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  const ref = useRef<string>("IdlePose")
  // Store current value in ref
  useEffect(() => {
    ref.current = value
  }, [value]) // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)
  return ref.current
}
