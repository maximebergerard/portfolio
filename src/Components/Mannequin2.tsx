/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.7 mannequin2.glb
*/
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
/* eslint-disable @typescript-eslint/ban-ts-comment */

import { useEffect, useRef, useState } from "react"
import { useGLTF, useAnimations } from "@react-three/drei"

export default function Model() {
  const group = useRef<THREE.Group>(null!)
  // @ts-ignore

  const { nodes, materials, animations } = useGLTF("/3dmodels/mannequin.glb")
  const { actions } = useAnimations(animations, group)
  const [action, setAction] = useState("IdlePose")
  const previousAction = usePrevious(action)

  useEffect(() => {
    if (previousAction) {
      // @ts-ignore
      actions[previousAction].fadeOut(0.5)
      actions[action]?.stop()
    }
    // @ts-ignore
    actions[action].play()
    // @ts-ignore
    actions[action].fadeIn(0.5)

    // const interval = setInterval(() => {
    //   if (action !== "FallingPose") {
    //     setAction("WavePose")
    //     setTimeout(() => setAction("IdlePose"), 2000)
    //   }
    // }, 10000)

    // return () => clearInterval(interval)
  }, [action, actions, previousAction])

  useEffect(() => {
    console.log(actions)
  }, [actions])

  return (
    <group
      ref={group}
      dispose={null}
      position={[15.5, -0.05, -4]}
      rotation={[Math.PI / 2, -Math.PI, Math.PI / 2]}
      onClick={() => {
        setAction("FallingPose")
      }}
    >
      <group name="Scene">
        <group name="Armature" scale={0.03}>
          <primitive object={nodes.mixamorig1Hips} />
          <skinnedMesh
            name="Ch36"
            geometry={nodes.Ch36.geometry}
            material={materials.Ch36_Body}
            skeleton={nodes.Ch36.skeleton}
          />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload("/3dmodels/mannequin.glb")

function usePrevious(value: string) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  const ref = useRef<string>("IdlePose")
  // Store current value in ref
  useEffect(() => {
    ref.current = value
  }, [value]) // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)
  return ref.current
}
